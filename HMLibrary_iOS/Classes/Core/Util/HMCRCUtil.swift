//
//  HMPTLCRCUtil.swift
//  JBLPartyBox
//
//  Created by Ravitej Tatipamula on 03/03/22.
//  Copyright © 2022 bis. All rights reserved.

/// CRC校验工具
public struct HMCRCUtil {
    
    fileprivate static let revCrcTable_JBLP: [UInt32] = [
            0x00000000, 0xDB710641,
            0x6D930AC3, 0xB6E20C82, 0xDB261586, 0x005713C7, 0xB6B51F45,
            0x6DC41904, 0x6D3D2D4D, 0xB64C2B0C, 0x00AE278E, 0xDBDF21CF,
            0xB61B38CB, 0x6D6A3E8A, 0xDB883208, 0x00F93449, 0xDA7A5A9A,
            0x010B5CDB, 0xB7E95059, 0x6C985618, 0x015C4F1C, 0xDA2D495D,
            0x6CCF45DF, 0xB7BE439E, 0xB74777D7, 0x6C367196, 0xDAD47D14,
            0x01A57B55, 0x6C616251, 0xB7106410, 0x01F26892, 0xDA836ED3,
            0x6F85B375, 0xB4F4B534, 0x0216B9B6, 0xD967BFF7, 0xB4A3A6F3,
            0x6FD2A0B2, 0xD930AC30, 0x0241AA71, 0x02B89E38, 0xD9C99879,
            0x6F2B94FB, 0xB45A92BA, 0xD99E8BBE, 0x02EF8DFF, 0xB40D817D,
            0x6F7C873C, 0xB5FFE9EF, 0x6E8EEFAE, 0xD86CE32C, 0x031DE56D,
            0x6ED9FC69, 0xB5A8FA28, 0x034AF6AA, 0xD83BF0EB, 0xD8C2C4A2,
            0x03B3C2E3, 0xB551CE61, 0x6E20C820, 0x03E4D124, 0xD895D765,
            0x6E77DBE7, 0xB506DDA6, 0xDF0B66EA, 0x047A60AB, 0xB2986C29,
            0x69E96A68, 0x042D736C, 0xDF5C752D, 0x69BE79AF, 0xB2CF7FEE,
            0xB2364BA7, 0x69474DE6, 0xDFA54164, 0x04D44725, 0x69105E21,
            0xB2615860, 0x048354E2, 0xDFF252A3, 0x05713C70, 0xDE003A31,
            0x68E236B3, 0xB39330F2, 0xDE5729F6, 0x05262FB7, 0xB3C42335,
            0x68B52574, 0x684C113D, 0xB33D177C, 0x05DF1BFE, 0xDEAE1DBF,
            0xB36A04BB, 0x681B02FA, 0xDEF90E78, 0x05880839, 0xB08ED59F,
            0x6BFFD3DE, 0xDD1DDF5C, 0x066CD91D, 0x6BA8C019, 0xB0D9C658,
            0x063BCADA, 0xDD4ACC9B, 0xDDB3F8D2, 0x06C2FE93, 0xB020F211,
            0x6B51F450, 0x0695ED54, 0xDDE4EB15, 0x6B06E797, 0xB077E1D6,
            0x6AF48F05, 0xB1858944, 0x076785C6, 0xDC168387, 0xB1D29A83,
            0x6AA39CC2, 0xDC419040, 0x07309601, 0x07C9A248, 0xDCB8A409,
            0x6A5AA88B, 0xB12BAECA, 0xDCEFB7CE, 0x079EB18F, 0xB17CBD0D,
            0x6A0DBB4C, 0x6567CB95, 0xBE16CDD4, 0x08F4C156, 0xD385C717,
            0xBE41DE13, 0x6530D852, 0xD3D2D4D0, 0x08A3D291, 0x085AE6D8,
            0xD32BE099, 0x65C9EC1B, 0xBEB8EA5A, 0xD37CF35E, 0x080DF51F,
            0xBEEFF99D, 0x659EFFDC, 0xBF1D910F, 0x646C974E, 0xD28E9BCC,
            0x09FF9D8D, 0x643B8489, 0xBF4A82C8, 0x09A88E4A, 0xD2D9880B,
            0xD220BC42, 0x0951BA03, 0xBFB3B681, 0x64C2B0C0, 0x0906A9C4,
            0xD277AF85, 0x6495A307, 0xBFE4A546, 0x0AE278E0, 0xD1937EA1,
            0x67717223, 0xBC007462, 0xD1C46D66, 0x0AB56B27, 0xBC5767A5,
            0x672661E4, 0x67DF55AD, 0xBCAE53EC, 0x0A4C5F6E, 0xD13D592F,
            0xBCF9402B, 0x6788466A, 0xD16A4AE8, 0x0A1B4CA9, 0xD098227A,
            0x0BE9243B, 0xBD0B28B9, 0x667A2EF8, 0x0BBE37FC, 0xD0CF31BD,
            0x662D3D3F, 0xBD5C3B7E, 0xBDA50F37, 0x66D40976, 0xD03605F4,
            0x0B4703B5, 0x66831AB1, 0xBDF21CF0, 0x0B101072, 0xD0611633,
            0xBA6CAD7F, 0x611DAB3E, 0xD7FFA7BC, 0x0C8EA1FD, 0x614AB8F9,
            0xBA3BBEB8, 0x0CD9B23A, 0xD7A8B47B, 0xD7518032, 0x0C208673,
            0xBAC28AF1, 0x61B38CB0, 0x0C7795B4, 0xD70693F5, 0x61E49F77,
            0xBA959936, 0x6016F7E5, 0xBB67F1A4, 0x0D85FD26, 0xD6F4FB67,
            0xBB30E263, 0x6041E422, 0xD6A3E8A0, 0x0DD2EEE1, 0x0D2BDAA8,
            0xD65ADCE9, 0x60B8D06B, 0xBBC9D62A, 0xD60DCF2E, 0x0D7CC96F,
            0xBB9EC5ED, 0x60EFC3AC, 0xD5E91E0A, 0x0E98184B, 0xB87A14C9,
            0x630B1288, 0x0ECF0B8C, 0xD5BE0DCD, 0x635C014F, 0xB82D070E,
            0xB8D43347, 0x63A53506, 0xD5473984, 0x0E363FC5, 0x63F226C1,
            0xB8832080, 0x0E612C02, 0xD5102A43, 0x0F934490, 0xD4E242D1,
            0x62004E53, 0xB9714812, 0xD4B55116, 0x0FC45757, 0xB9265BD5,
            0x62575D94, 0x62AE69DD, 0xB9DF6F9C, 0x0F3D631E, 0xD44C655F,
            0xB9887C5B, 0x62F97A1A, 0xD41B7698, 0x0F6A70D9,
    ]
    
    fileprivate static func crc_JBLP(_ data: Data) -> UInt32 {
        var crc: UInt32 = 0
        for i in stride(from: data.count - 1, to: 0, by: -2) {
            crc = revCrcUpdate_JBLP(crc, UInt32(data[i - 1]) & UInt32(0xFF))
            crc = revCrcUpdate_JBLP(crc, UInt32(data[i]) & UInt32(0xFF))
        }
        return crc
    }
    fileprivate static func crc_JBLP_QCC(_ data: Data) -> UInt32 {
        var crc: UInt32 = 0
        for index in 0 ..< data.count {
            crc = revCrcUpdate_JBLP(crc, UInt32(data[index]) & UInt32(0xFF));
        }
        return crc
    }
    
    fileprivate static func revCrcUpdate_JBLP(_ acc: UInt32, _ delta: UInt32) -> UInt32 {
        let t: UInt32 = acc >> 24
        let lookup = Int(t & 0xFF)
        let acc2: UInt32 = ((acc) << 8) ^ revCrcTable_JBLP[lookup] ^ (delta)
        return acc2
    }
    
    fileprivate static let JBLCRC16Table: [UInt16] = [
        0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
        0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
        0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
        0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
        0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
        0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
        0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
        0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
        0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
        0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
        0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
        0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
        0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
        0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
        0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
        0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
        0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
        0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
        0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
        0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
        0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
        0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
        0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
        0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
        0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
        0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
        0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
        0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
        0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
        0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
        0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
        0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040,
    ]
    
    fileprivate static func crc16Byte(crc: UInt16, value: UInt8) -> UInt16 {
        return (crc >> 8) ^ JBLCRC16Table[Int(crc ^ UInt16(value)) & 0xff]
    }
}

extension HMCRCUtil {
    
    /// data经过crc16之后的值
    /// - Parameter initCrcValue: 初始crc值
    /// - Parameter data: crc16后的Data
    /// - Returns: UInt16
    public static func crc16(initCrcValue: UInt16 = 0, data: Data) -> UInt16 {
        var result: UInt16 = initCrcValue
        for i in 0 ..< data.count {
            result = crc16Byte(crc: result, value: data[i])
        }
        return result
    }
    
    public static func fileCrc_JBLP(_ data: Data) -> UInt32 {
        var buffer = Data(repeating: 0, count: data.count + 4)
        for i in 0..<4 {
            buffer[i] = 0xff
        }
        for i in 4..<buffer.count {
            buffer[i] = data[i - 4]
        }
        let crcCode = crc_JBLP(buffer)
        return crcCode
    }
    
    public static func fileCrc_JBLP_QCC(_ data: Data) -> UInt32 {
        var buffer = Data(repeating: 0, count: data.count + 4)
        for i in 0..<data.count {
            buffer[i] = data[i]
        }
        for i in 0..<4 {
            buffer[data.count + i] = 0xff
        }
        
        let crcCode = crc_JBLP_QCC(buffer)
        return crcCode
    }
}



